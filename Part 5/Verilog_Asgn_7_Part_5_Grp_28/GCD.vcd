$date
	Mon Nov 13 23:43:19 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_tb $end
$var wire 32 ! GCD [31:0] $end
$var reg 1 " clk $end
$var reg 1 # clk2 $end
$var reg 1 $ rst $end
$scope module uut $end
$var wire 32 % Pdata [31:0] $end
$var wire 1 " clk $end
$var wire 1 # clk2 $end
$var wire 32 & dataSPin [31:0] $end
$var wire 1 ' en $end
$var wire 1 ( pop $end
$var wire 1 ) push $end
$var wire 1 $ rst $end
$var wire 32 * stack_pointer [31:0] $end
$var wire 1 + zflag $end
$var wire 1 , writeRegw $end
$var wire 1 - writeDmw $end
$var wire 32 . writeBack [31:0] $end
$var wire 1 / signflag $end
$var wire 1 0 rstw $end
$var wire 32 1 return_Reg [31:0] $end
$var wire 32 2 reg2_dataw [31:0] $end
$var wire 32 3 reg1_dataw [31:0] $end
$var wire 32 4 readM_data [31:0] $end
$var wire 1 5 readInw $end
$var wire 1 6 readDmw $end
$var wire 32 7 pc_out [31:0] $end
$var wire 32 8 pc_branch_targetw [31:0] $end
$var wire 1 9 overflowflag $end
$var wire 1 : muxWBw $end
$var wire 32 ; imm32w [31:0] $end
$var wire 1 < empty $end
$var wire 32 = douta [31:0] $end
$var wire 32 > dataSPout [31:0] $end
$var wire 1 ? carryflag $end
$var wire 3 @ branchw [2:0] $end
$var wire 32 A aluOutw [31:0] $end
$var wire 4 B aluFuncw [3:0] $end
$var wire 1 C MuxAlu2w $end
$var wire 1 D MuxAlu1w $end
$var reg 1 E MuxAlu1 $end
$var reg 1 F MuxAlu2 $end
$var reg 32 G addr [31:0] $end
$var reg 4 H aluFunc [3:0] $end
$var reg 32 I aluOut [31:0] $end
$var reg 3 J branch [2:0] $end
$var reg 32 K imm32 [31:0] $end
$var reg 32 L instruction [31:0] $end
$var reg 32 M ldValue [31:0] $end
$var reg 1 N muxWB $end
$var reg 32 O opA [31:0] $end
$var reg 32 P opB [31:0] $end
$var reg 32 Q pc [31:0] $end
$var reg 32 R pc_4 [31:0] $end
$var reg 32 S pc_branch_target [31:0] $end
$var reg 1 T readDm $end
$var reg 1 U readIn $end
$var reg 32 V reg1_data [31:0] $end
$var reg 32 W reg2_data [31:0] $end
$var reg 1 X writeDm $end
$var reg 32 Y writeM_data [31:0] $end
$var reg 1 Z writeReg $end
$var reg 5 [ writeRegister [4:0] $end
$var reg 32 \ write_data [31:0] $end
$scope module Br $end
$var wire 3 ] branch [2:0] $end
$var wire 1 " clk $end
$var wire 32 ^ offset [31:0] $end
$var wire 32 _ pc_in [31:0] $end
$var wire 32 ` regData [31:0] $end
$var wire 1 $ rst $end
$var reg 32 a pc_out [31:0] $end
$upscope $end
$scope module CU $end
$var wire 1 " clk $end
$var wire 32 b instruction [31:0] $end
$var reg 1 D MuxAlu1 $end
$var reg 1 C MuxAlu2 $end
$var reg 4 c aluFunc [3:0] $end
$var reg 3 d branch [2:0] $end
$var reg 1 : muxWB $end
$var reg 1 6 readDm $end
$var reg 1 5 readIn $end
$var reg 1 0 rst $end
$var reg 1 - writeDm $end
$var reg 1 , writeReg $end
$upscope $end
$scope module DMem $end
$var wire 32 e address [31:0] $end
$var wire 1 " clk $end
$var wire 1 T mem_read $end
$var wire 1 X mem_write $end
$var wire 32 f read_data [31:0] $end
$var wire 1 $ rst $end
$var wire 32 g write_data [31:0] $end
$upscope $end
$scope module IMem $end
$var wire 1 " clk $end
$var wire 32 h douta [31:0] $end
$var wire 1 $ rsta $end
$var wire 32 i addra [31:0] $end
$var integer 32 j i [31:0] $end
$upscope $end
$scope module PC $end
$var wire 3 k branch [2:0] $end
$var wire 1 " clk $end
$var wire 32 l pc_4 [31:0] $end
$var wire 32 m pc_branch_target [31:0] $end
$var wire 1 U readIn $end
$var wire 1 $ rst $end
$var reg 32 n pc [31:0] $end
$upscope $end
$scope module RB $end
$var wire 1 " clk $end
$var wire 1 Z regWrite $end
$var wire 32 o retReg [31:0] $end
$var wire 5 p rs [4:0] $end
$var wire 32 q rs_out [31:0] $end
$var wire 1 $ rst $end
$var wire 5 r rt [4:0] $end
$var wire 32 s rt_out [31:0] $end
$var wire 32 t sp [31:0] $end
$var wire 32 u writeData [31:0] $end
$var wire 5 v writeReg [4:0] $end
$var integer 32 w i [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 x imm16 [15:0] $end
$var wire 32 y imm32 [31:0] $end
$upscope $end
$scope module WB $end
$var wire 32 z aluOut [31:0] $end
$var wire 1 " clk $end
$var wire 32 { ldValue [31:0] $end
$var wire 1 N select $end
$var wire 32 | writeBack [31:0] $end
$upscope $end
$scope module arithematic $end
$var wire 1 " clk $end
$var wire 4 } opCode [3:0] $end
$var wire 32 ~ operandA [31:0] $end
$var wire 32 !" operandB [31:0] $end
$var reg 1 ? carryflag $end
$var reg 1 9 overflowflag $end
$var reg 32 "" result [31:0] $end
$var reg 1 / signflag $end
$var reg 1 + zflag $end
$upscope $end
$scope module stkPtr $end
$var wire 1 " clk $end
$var wire 32 #" data_in [31:0] $end
$var wire 1 ' enable $end
$var wire 1 ( pop $end
$var wire 1 ) push $end
$var wire 1 $ rst $end
$var wire 32 $" stackPointer [31:0] $end
$var wire 1 < empty $end
$var wire 32 %" data_out [31:0] $end
$var reg 8 &" sp [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 &"
b0 %"
bx $"
bz #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
b10 m
b0 l
b0 k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
b0 _
bx ^
b0 ]
bx \
bx [
xZ
bx Y
xX
bx W
bx V
1U
xT
b10 S
b0 R
b0 Q
bx P
bx O
xN
bx M
bx L
bx K
b0 J
bx I
bx H
bx G
xF
xE
xD
xC
bx B
bx A
bx @
x?
b0 >
bx =
1<
bx ;
x:
x9
bx 8
bx 7
x6
x5
bx 4
bx 3
bx 2
bx 1
x0
x/
bx .
x-
x,
x+
bx *
z)
z(
z'
bz &
bx %
1$
0#
0"
bx !
$end
#5000
b0 *
b0 t
b0 $"
b0 1
b0 o
0/
0+
0?
09
b0 8
b0 a
b100000000000010000000000010010 =
b100000000000010000000000010010 b
b100000000000010000000000010010 h
b0 7
b0 i
b0 n
b10000000 j
b100000 w
bx J
bx ]
bx k
xU
bx Q
bx _
1"
#10000
0"
0$
#15000
b0 B
b0 c
b0 @
b0 d
00
1,
1:
06
0-
0C
1D
15
b10010 ;
b10010 y
b10010 x
b0 3
b0 q
b0 p
b0 2
b0 s
b1 r
b1 [
b1 v
b100000000000010000000000010010 L
b0 Q
b0 _
1"
#20000
0"
#25000
bx 2
bx s
bx 1
bx o
x+
b10010 A
b10010 ""
b1 8
b1 a
b0 Y
b0 g
b0 W
b0 V
b0 `
b10010 P
b10010 !"
b0 O
b0 ~
b0 J
b0 ]
b0 k
1Z
1N
0T
0X
0F
1E
1U
b0 H
b0 }
b10010 K
b10010 ^
1"
#30000
0"
#35000
0+
b10010 !
b10010 %
b10010 .
b10010 |
bx Y
bx g
b10010 G
b10010 e
b10010 I
b10010 z
bx W
1"
#40000
0"
#45000
b10010 2
b10010 s
b10010 1
b10010 o
b10010 \
b10010 u
1"
#50000
0"
#55000
b10010 Y
b10010 g
b10010 W
1"
#60000
0"
#65000
1"
#70000
0"
#75000
1"
#80000
0"
#85000
1"
#90000
0"
#95000
1"
#100000
0"
#105000
1"
#110000
0"
#115000
1"
#120000
0"
#125000
1"
#130000
0"
#135000
1"
#140000
0"
#145000
1"
#150000
0"
#155000
1"
#160000
0"
#165000
1"
#170000
0"
#175000
1"
#180000
0"
#185000
1"
#190000
0"
#195000
1"
#200000
b1 S
b1 m
b1 R
b1 l
0"
1#
#205000
b100000000000100000000000001100 =
b100000000000100000000000001100 b
b100000000000100000000000001100 h
b1 7
b1 i
b1 n
1"
#210000
0"
#215000
b1100 ;
b1100 y
b1100 x
b0 2
b0 s
b10 r
b10 [
b10 v
b100000000000100000000000001100 L
b1 Q
b1 _
1"
#220000
0"
#225000
b10010 2
b10010 s
b1100 A
b1100 ""
b10 8
b10 a
b0 Y
b0 g
b0 W
b1100 P
b1100 !"
b1100 K
b1100 ^
1"
#230000
0"
#235000
b1100 !
b1100 %
b1100 .
b1100 |
b10010 Y
b10010 g
b1100 G
b1100 e
b1100 I
b1100 z
b10010 W
1"
#240000
0"
#245000
b1100 2
b1100 s
b1100 \
b1100 u
1"
#250000
0"
#255000
b1100 Y
b1100 g
b1100 W
1"
#260000
0"
#265000
1"
#270000
0"
#275000
1"
#280000
0"
#285000
1"
#290000
0"
#295000
1"
#300000
0"
#305000
1"
#310000
0"
#315000
1"
#320000
0"
#325000
1"
#330000
0"
#335000
1"
#340000
0"
#345000
1"
#350000
0"
#355000
1"
#360000
0"
#365000
1"
#370000
0"
#375000
1"
#380000
0"
#385000
1"
#390000
0"
#395000
1"
#400000
0"
0#
#405000
1"
#410000
0"
#415000
1"
#420000
0"
#425000
1"
#430000
0"
#435000
1"
#440000
0"
#445000
1"
#450000
0"
#455000
1"
#460000
0"
#465000
1"
#470000
0"
#475000
1"
#480000
0"
#485000
1"
#490000
0"
#495000
1"
#500000
0"
#505000
1"
#510000
0"
#515000
1"
#520000
0"
#525000
1"
#530000
0"
#535000
1"
#540000
0"
#545000
1"
#550000
0"
#555000
1"
#560000
0"
#565000
1"
#570000
0"
#575000
1"
#580000
0"
#585000
1"
#590000
0"
#595000
1"
#600000
b10 S
b10 m
b10 R
b10 l
0"
1#
#605000
b100001000100001100000000000 =
b100001000100001100000000000 b
b100001000100001100000000000 h
b10 7
b10 i
b10 n
1"
#610000
0"
#615000
b1 B
b1 c
1C
b1100000000000 ;
b1100000000000 y
b1100000000000 x
b10010 3
b10010 q
b1 p
b11 [
b11 v
b100001000100001100000000000 L
b10 Q
b10 _
1"
#620000
0"
#625000
b110 A
b110 ""
b11 8
b11 a
b10010 V
b10010 `
b10010 O
b10010 ~
1F
b1 H
b1 }
b1100000000000 K
b1100000000000 ^
1"
#630000
0"
#635000
b110 !
b110 %
b110 .
b110 |
b110 G
b110 e
b110 I
b110 z
1"
#640000
0"
#645000
b110 \
b110 u
1"
#650000
0"
#655000
1"
#660000
0"
#665000
1"
#670000
0"
#675000
1"
#680000
0"
#685000
1"
#690000
0"
#695000
1"
#700000
0"
#705000
1"
#710000
0"
#715000
1"
#720000
0"
#725000
1"
#730000
0"
#735000
1"
#740000
0"
#745000
1"
#750000
0"
#755000
1"
#760000
0"
#765000
1"
#770000
0"
#775000
1"
#780000
0"
#785000
1"
#790000
0"
#795000
1"
#800000
0"
0#
#805000
1"
#810000
0"
#815000
1"
#820000
0"
#825000
1"
#830000
0"
#835000
1"
#840000
0"
#845000
1"
#850000
0"
#855000
1"
#860000
0"
#865000
1"
#870000
0"
#875000
1"
#880000
0"
#885000
1"
#890000
0"
#895000
1"
#900000
0"
#905000
1"
#910000
0"
#915000
1"
#920000
0"
#925000
1"
#930000
0"
#935000
1"
#940000
0"
#945000
1"
#950000
0"
#955000
1"
#960000
0"
#965000
1"
#970000
0"
#975000
1"
#980000
0"
#985000
1"
#990000
0"
#995000
1"
#1000000
b11 S
b11 m
b11 R
b11 l
0"
1#
#1005000
b1101100011000000000000000001010 =
b1101100011000000000000000001010 b
b1101100011000000000000000001010 h
b11 7
b11 i
b11 n
1"
#1010000
0"
#1015000
b0 B
b0 c
b100 @
b100 d
0,
0:
0C
0D
b1010 ;
b1010 y
b1010 x
b110 3
b110 q
b11 p
b0 2
b0 s
b0 r
b0 [
b0 v
b1101100011000000000000000001010 L
b11 Q
b11 _
1"
#1020000
0"
#1025000
b1101 A
b1101 ""
b100 8
b100 a
bx !
bx %
bx .
bx |
b0 Y
b0 g
b0 W
b110 V
b110 `
b1010 P
b1010 !"
b11 O
b11 ~
b100 J
b100 ]
b100 k
0Z
0N
0F
0E
b0 H
b0 }
b1010 K
b1010 ^
1"
#1030000
0"
#1035000
bx \
bx u
b1101 G
b1101 e
b1101 I
b1101 z
1"
#1040000
0"
#1045000
1"
#1050000
0"
#1055000
1"
#1060000
0"
#1065000
1"
#1070000
0"
#1075000
1"
#1080000
0"
#1085000
1"
#1090000
0"
#1095000
1"
#1100000
0"
#1105000
1"
#1110000
0"
#1115000
1"
#1120000
0"
#1125000
1"
#1130000
0"
#1135000
1"
#1140000
0"
#1145000
1"
#1150000
0"
#1155000
1"
#1160000
0"
#1165000
1"
#1170000
0"
#1175000
1"
#1180000
0"
#1185000
1"
#1190000
0"
#1195000
1"
#1200000
0"
0#
#1205000
1"
#1210000
0"
#1215000
1"
#1220000
0"
#1225000
1"
#1230000
0"
#1235000
1"
#1240000
0"
#1245000
1"
#1250000
0"
#1255000
1"
#1260000
0"
#1265000
1"
#1270000
0"
#1275000
1"
#1280000
0"
#1285000
1"
#1290000
0"
#1295000
1"
#1300000
0"
#1305000
1"
#1310000
0"
#1315000
1"
#1320000
0"
#1325000
1"
#1330000
0"
#1335000
1"
#1340000
0"
#1345000
1"
#1350000
0"
#1355000
1"
#1360000
0"
#1365000
1"
#1370000
0"
#1375000
1"
#1380000
0"
#1385000
1"
#1390000
0"
#1395000
1"
#1400000
b100 S
b100 m
b100 R
b100 l
0"
1#
#1405000
b1100100011000000000000000000111 =
b1100100011000000000000000000111 b
b1100100011000000000000000000111 h
b100 7
b100 i
b100 n
1"
#1410000
0"
#1415000
b10 @
b10 d
b111 ;
b111 y
b111 x
b100 O
b100 ~
b1100100011000000000000000000111 L
b100 Q
b100 _
1"
#1420000
0"
#1425000
b1011 A
b1011 ""
b101 8
b101 a
b111 P
b111 !"
b10 J
b10 ]
b10 k
b111 K
b111 ^
1"
#1430000
0"
#1435000
b1011 G
b1011 e
b1011 I
b1011 z
1"
#1440000
0"
#1445000
1"
#1450000
0"
#1455000
1"
#1460000
0"
#1465000
1"
#1470000
0"
#1475000
1"
#1480000
0"
#1485000
1"
#1490000
0"
#1495000
1"
#1500000
0"
#1505000
1"
#1510000
0"
#1515000
1"
#1520000
0"
#1525000
1"
#1530000
0"
#1535000
1"
#1540000
0"
#1545000
1"
#1550000
0"
#1555000
1"
#1560000
0"
#1565000
1"
#1570000
0"
#1575000
1"
#1580000
0"
#1585000
1"
#1590000
0"
#1595000
1"
#1600000
0"
0#
#1605000
1"
#1610000
0"
#1615000
1"
#1620000
0"
#1625000
1"
#1630000
0"
#1635000
1"
#1640000
0"
#1645000
1"
#1650000
0"
#1655000
1"
#1660000
0"
#1665000
1"
#1670000
0"
#1675000
1"
#1680000
0"
#1685000
1"
#1690000
0"
#1695000
1"
#1700000
0"
#1705000
1"
#1710000
0"
